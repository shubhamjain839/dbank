{"version":3,"sources":["components/Spinner.tsx","web3.ts","DBank.ts","utils.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Spinner","src","process","alt","web3","HDWalletProvider","mnemonics","dev","address","Web3","window","ethereum","DBankContract","eth","Contract","abi","dbank","prod","genrateHash","payer","reciver","amount","nonce","utils","soliditySha3","signMessage","hash","a","hashedMessage","sign","signature","App","useState","loading","setLoading","ether","setEther","etherDeposit","setEtherDeposit","etherWithdraw","setEtherWithdraw","setSignature","accountBalance","setAccountBalance","manager","setManager","accounts","setAccounts","event","setEvent","recipientAddress","setRecipientAddress","payerAddress","setPayerAddress","setNonce","setMenu","setSetMenu","getDetails","getAccounts","DBank","methods","call","checkBalance","fromWei","message","toast","error","console","log","genrateSignature","toWei","onWithdrawHandler","e","preventDefault","withdrawBalance","send","from","gas","reciept","events","info","onDepositHandler","depositBalance","value","genrateRecieveRequest","transferBalance","menuToggle","useEffect","className","Container","Jumbotron","Row","Col","Form","onSubmit","FormGroup","FormControl","placeholder","onChange","target","type","Button","onClick","readOnly","defaultValue","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b3734b21.chunk.js","sourcesContent":["import React from 'react'\nexport const Spinner = () => {\n  return (\n    <div>\n      <img src={`${process.env.PUBLIC_URL}/assets/spinner.svg`} alt='spinner' />\n    </div>\n  )\n}\n","import Web3 from 'web3'\n\n// Use this provider for development environment\n\nimport HDWalletProvider from '@truffle/hdwallet-provider'\nimport { mnemonics, address } from './ProviderConfig.json'\nconst provider = new HDWalletProvider(mnemonics.dev, address.dev)\n\n//@ts-ignore\nconst web3 = new Web3(window.ethereum)\n\nexport default web3\n","import web3 from './web3'\nimport { AbiItem } from 'web3-utils'\nimport { abi } from './contracts/DBank.json'\nimport { dbank } from './DeployedAddress.json'\n\nconst DBankContract = new web3.eth.Contract(abi as AbiItem[], dbank.prod)\n\nexport default DBankContract\n","import web3 from './web3'\nexport interface IHash {\n  payer: string\n  reciver: string\n  amount: string\n  nonce: string\n}\n\nexport const genrateHash = ({ payer, reciver, amount, nonce }: IHash) => {\n  const hash = web3.utils.soliditySha3(payer, reciver, amount, nonce)\n  return hash\n}\n\nexport const signMessage = async (hash: IHash) => {\n  const hashedMessage = genrateHash(hash)\n  if (hashedMessage) {\n    const signature = await web3.eth.sign(hashedMessage, hash.payer)\n    return signature\n  }\n}\n","import React, { useEffect, useState } from 'react'\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport './App.css'\nimport { Spinner } from './components/Spinner'\nimport DBank from './DBank'\nimport web3 from './web3'\nimport { ToastContainer, toast } from 'react-toastify'\nimport 'react-toastify/dist/ReactToastify.css'\nimport { signMessage } from './utils'\nimport {\n  Button,\n  Col,\n  Container,\n  Form,\n  FormControl,\n  FormGroup,\n  Jumbotron,\n  Row,\n} from 'react-bootstrap'\n\nconst App = () => {\n  // All state variables\n  const [loading, setLoading] = useState<boolean>(false)\n  const [ether, setEther] = useState<string>('')\n  const [etherDeposit, setEtherDeposit] = useState<string>('')\n  const [etherWithdraw, setEtherWithdraw] = useState<string>('')\n  const [signature, setSignature] = useState('')\n  const [accountBalance, setAccountBalance] = useState('')\n  const [manager, setManager] = useState<string>('')\n  const [accounts, setAccounts] = useState<string[]>()\n  const [event, setEvent] = useState<{}>()\n  const [recipientAddress, setRecipientAddress] = useState('')\n  const [payerAddress, setPayerAddress] = useState('')\n  const [nonce, setNonce] = useState('')\n  const [setMenu, setSetMenu] = useState(false)\n\n  // Method to get all details about the contract\n  const getDetails = async () => {\n    try {\n      const accounts = await web3.eth.getAccounts()\n      const manager = await DBank.methods.manager().call()\n      const accountBalance = web3.utils.fromWei(\n        await DBank.methods.checkBalance(accounts[0]).call()\n      )\n      setAccountBalance(accountBalance)\n      setAccounts(accounts)\n      setManager(manager)\n    } catch (error) {\n      if (error.message === 'Provider not set or invalid')\n        toast.error('Please install Metamask to Run this app')\n      else toast.error('Network Error! please try again')\n      console.log(error)\n    }\n  }\n\n  //Method to genrate Signature\n  const genrateSignature = async () => {\n    if (accounts) {\n      const signature = await signMessage({\n        payer: accounts[0],\n        reciver: recipientAddress,\n        amount: web3.utils.toWei(ether),\n        nonce: nonce,\n      })\n      if (signature) setSignature(signature)\n    }\n  }\n\n  //Method to withdraw ether from account\n  const onWithdrawHandler = async (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault()\n    if (accounts) {\n      try {\n        setLoading(true)\n        const reciept = await DBank.methods\n          .withdrawBalance(web3.utils.toWei(etherWithdraw))\n          .send({ from: accounts[0], gas: '3000000' })\n        setEvent(reciept.events)\n        toast.info('Withdrawn')\n        setEtherWithdraw('')\n        setLoading(false)\n      } catch (error) {\n        if (error.message === 'Provider not set or invalid')\n          toast.error('Please install Metamask to Run this app')\n        toast.error('Failed To Transact Try again Later')\n        setLoading(false)\n      }\n    }\n  }\n\n  //Method to Deposit ether to DBank\n  const onDepositHandler = async (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault()\n    if (accounts) {\n      try {\n        setLoading(true)\n        const reciept = await DBank.methods\n          .depositBalance()\n          .send({ from: accounts[0], value: web3.utils.toWei(etherDeposit) })\n        setEtherDeposit('')\n        setEvent(reciept.events)\n        toast.info('Deposited')\n        setLoading(false)\n      } catch (error) {\n        if (error.message === 'Provider not set or invalid')\n          toast.error('Please install Metamask to Run this app')\n        toast.error('Failed To Transact Try again Later')\n        setLoading(false)\n      }\n    }\n  }\n\n  //Method to genrate the request por payment with the message and signature\n  const genrateRecieveRequest = async (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault()\n    if (accounts) {\n      try {\n        setLoading(true)\n        const reciept = await DBank.methods\n          .transferBalance(\n            payerAddress,\n            web3.utils.toWei(ether),\n            nonce,\n            signature\n          )\n          .send({ from: accounts[0], gas: '3000000' })\n        setEvent(reciept.events)\n        toast.info('Recieved')\n        setLoading(false)\n      } catch (error) {\n        if (error.message === 'Provider not set or invalid')\n          toast.error('Please install Metamask to Run this app')\n        toast.error('Failed To Transact Try again Later')\n        setLoading(false)\n        console.log(error)\n      }\n    }\n  }\n\n  const menuToggle = () => {\n    setSetMenu(!setMenu)\n    setEther('')\n    setRecipientAddress('')\n    setPayerAddress('')\n    setNonce('')\n    setSignature('')\n  }\n\n  useEffect(() => {\n    getDetails()\n  }, [event])\n\n  return (\n    <div className='App'>\n      <Container>\n        <div className='d-flex flex-column justify-content-center align-items-center p-5'>\n          <h1>DBank</h1>\n          <h3>\n            DBank. Most secure Banking system based on Ethereum Blockchain.\n          </h3>\n        </div>\n        <Jumbotron className='App-section'>\n          <Row>\n            <Col>\n              <Form onSubmit={onDepositHandler}>\n                <FormGroup>\n                  <h4>Deposit Ether</h4>\n                  <FormControl\n                    className='input-field'\n                    placeholder='Ether'\n                    value={etherDeposit}\n                    onChange={(e) => setEtherDeposit(e.target.value)}\n                    type='number'\n                  />\n                </FormGroup>\n                <FormGroup className='d-flex justify-content-center'>\n                  {!loading && <Button type='submit'>Deposit</Button>}\n                </FormGroup>\n              </Form>\n            </Col>\n            <Col>\n              <Form onSubmit={onWithdrawHandler}>\n                <FormGroup>\n                  <h4>Withdraw Ether</h4>\n                  <FormControl\n                    className='input-field'\n                    placeholder='Ether'\n                    value={etherWithdraw}\n                    onChange={(e) => setEtherWithdraw(e.target.value)}\n                    type='number'\n                  />\n                </FormGroup>\n                <FormGroup className='d-flex justify-content-center'>\n                  {!loading && <Button type='submit'>Withdraw</Button>}\n                </FormGroup>\n              </Form>\n            </Col>\n          </Row>\n          <Row className='mt-5 d-flex justify-content-center '>\n            {loading ? (\n              <Spinner />\n            ) : (\n              <>\n                <Col>\n                  <h4>Account Balance: </h4>\n                  <h5>{accountBalance} Ether</h5>\n                  <h5 className='mt-4'>Your Account: </h5>\n                  <h5>{accounts && accounts[0]}</h5>\n                  <h6 className='mt-4'>Managed By: </h6>\n                  <p>{manager}</p>\n                </Col>\n                {setMenu ? (\n                  <Col>\n                    <Form>\n                      <h4>Tranfer Ether</h4>\n                      <FormGroup>\n                        <h6>Recipient Address</h6>\n                        <FormControl\n                          value={recipientAddress}\n                          onChange={(e) => setRecipientAddress(e.target.value)}\n                          type='text'\n                        />\n                      </FormGroup>\n                      <FormGroup>\n                        <h6>Ether </h6>\n                        <FormControl\n                          value={ether}\n                          onChange={(e) => setEther(e.target.value)}\n                          type='number'\n                        />\n                      </FormGroup>\n                      <FormGroup>\n                        <h6>Nonce </h6>\n                        <FormControl\n                          value={nonce}\n                          onChange={(e) => setNonce(e.target.value)}\n                          type='number'\n                        />\n                      </FormGroup>\n                      <FormGroup>\n                        <Button onClick={genrateSignature}>\n                          Generate Signature\n                        </Button>\n                      </FormGroup>\n                    </Form>\n                    {signature && (\n                      <FormGroup>\n                        <FormControl\n                          type='text'\n                          readOnly\n                          defaultValue={signature}\n                        />\n                        <Button onClick={() => setSignature('')}>CLEAR</Button>\n                      </FormGroup>\n                    )}\n                    <FormGroup>\n                      <p className='Link' onClick={menuToggle}>\n                        Recieve Ether instead?\n                      </p>\n                    </FormGroup>\n                  </Col>\n                ) : (\n                  <Col>\n                    <Form onSubmit={genrateRecieveRequest}>\n                      <h4>Recieve Ether</h4>\n                      <FormGroup>\n                        <h6>Sender Address</h6>\n                        <FormControl\n                          value={payerAddress}\n                          onChange={(e) => setPayerAddress(e.target.value)}\n                          type='text'\n                        />\n                      </FormGroup>\n                      <FormGroup>\n                        <h6>Ether </h6>\n                        <FormControl\n                          value={ether}\n                          onChange={(e) => setEther(e.target.value)}\n                          type='number'\n                        />\n                      </FormGroup>\n                      <FormGroup>\n                        <h6>Nonce </h6>\n                        <FormControl\n                          value={nonce}\n                          onChange={(e) => setNonce(e.target.value)}\n                          type='number'\n                        />\n                      </FormGroup>\n                      <FormGroup>\n                        <h6>Signature</h6>\n                        <FormControl\n                          type='text'\n                          value={signature}\n                          onChange={(e) => setSignature(e.target.value)}\n                        />\n                      </FormGroup>\n                      <FormGroup>\n                        <Button type='submit'>Send Request</Button>\n                      </FormGroup>\n                    </Form>\n\n                    <FormGroup>\n                      <p className='Link' onClick={menuToggle}>\n                        Send Ether instead?\n                      </p>\n                    </FormGroup>\n                  </Col>\n                )}\n              </>\n            )}\n          </Row>\n        </Jumbotron>\n        <ToastContainer />\n      </Container>\n    </div>\n  )\n}\n\nexport default App\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}